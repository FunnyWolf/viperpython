# -*- coding: utf-8 -*-
# @File  : vulnerability.py
# @Date  : 2021/2/26
# @Desc  :
import time

from django.db import transaction

from Lib.api import data_return
from Lib.configs import CODE_MSG_ZH, Vulnerability_MSG_ZH, CODE_MSG_EN, Vulnerability_MSG_EN
from Lib.log import logger
from PostLateral.models import VulnerabilityModel
from PostLateral.serializers import VulnerabilitySerializer
from PostModule.Handle.postmoduleconfig import PostModuleConfig


class Vulnerability(object):
    """存储扫描到的漏洞信息,以ipaddress为维度处理"""

    def __init__(self):
        pass

    @staticmethod
    def list(ipaddress=None):
        data = Vulnerability.list_vulnerability(ipaddress=ipaddress)
        try:
            format_data = Vulnerability.format_source_module(data)
        except Exception as E:
            format_data = data
            logger.error(E)
        context = data_return(200, format_data, CODE_MSG_ZH.get(200), CODE_MSG_EN.get(200))
        return context

    @staticmethod
    def list_vulnerability(ipaddress=None):
        if ipaddress is None:
            orm_models = VulnerabilityModel.objects.all().order_by('source_module_loadpath')
        else:
            orm_models = VulnerabilityModel.objects.filter(ipaddress=ipaddress).order_by('source_module_loadpath')
        data = VulnerabilitySerializer(orm_models, many=True).data
        return data

    @staticmethod
    def destory(vid=None):
        try:
            VulnerabilityModel.objects.filter(id=vid).delete()
            context = data_return(204, {}, Vulnerability_MSG_ZH.get(204), Vulnerability_MSG_EN.get(204))
        except Exception as E:
            logger.error(E)
            context = data_return(304, {}, Vulnerability_MSG_ZH.get(304), Vulnerability_MSG_EN.get(304))
        return context

    @staticmethod
    def add_or_update(ipaddress=None, source_module_loadpath=None, extra_data=None, desc=None):
        default_dict = {'ipaddress': ipaddress, 'source_module_loadpath': source_module_loadpath,
                        'extra_data': extra_data,
                        'desc': desc, 'update_time': int(time.time())}  # 没有此主机数据时新建
        model, created = VulnerabilityModel.objects.get_or_create(ipaddress=ipaddress,
                                                                  source_module_loadpath=source_module_loadpath,
                                                                  extra_data=extra_data, defaults=default_dict)
        if created is True:
            return True  # 新建后直接返回
        # 有历史数据
        with transaction.atomic():
            try:
                model = VulnerabilityModel.objects.select_for_update().get(ipaddress=ipaddress,
                                                                           source_module_loadpath=source_module_loadpath,
                                                                           extra_data=extra_data, )
                model.ipaddress = ipaddress
                model.source_module_loadpath = source_module_loadpath
                model.update_time = int(time.time())
                model.extra_data = extra_data
                model.desc = desc
                model.save()
                return True
            except Exception as E:
                logger.error(E)
                return False

    @staticmethod
    def format_source_module(vulnerability_list=None):
        """将服务信息格式化"""
        for vulnerability in vulnerability_list:
            module_name = PostModuleConfig.get_module_name_by_loadpath(vulnerability.get('source_module_loadpath'))
            vulnerability['source_module_name'] = module_name
        return vulnerability_list
