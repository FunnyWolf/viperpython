# -*- coding: utf-8 -*-
# @File  : portservice.py
# @Date  : 2021/2/26
# @Desc  :
from elasticsearch_dsl import Search, Q

from Lib.esclient import EsClient
from WebDatabase.documents import VulnerabilityDocument


class Vulnerability(object):

    @staticmethod
    def list_by_ipdomain_port(ipdomain, port):

        bool_query = Q('bool', must=[
            Q('term', ipdomain=ipdomain),
            Q('term', port=port)
        ])
        response = Search(index=VulnerabilityDocument.Index.name).query(bool_query).execute()
        data_list = EsClient.convert_to_dicts(response)

        info_num = 0
        low_num = 0
        medium_num = 0
        high_num = 0
        critical_num = 0

        for data in data_list:
            if data.get("severity") == "info":
                info_num += 1
            elif data.get("severity") == "low":
                low_num += 1
            elif data.get("severity") == "medium":
                medium_num += 1
            elif data.get("severity") == "high":
                high_num += 1
            elif data.get("severity") == "critical":
                critical_num += 1
            else:
                pass
        num_count = {'info': info_num, 'low': low_num, 'medium': medium_num, 'high': high_num, 'critical': critical_num}

        return {"num_count": num_count, "data": data_list}

    # @staticmethod
    # def update_or_create(ipdomain=None, port=None, name=None, description=None, severity=None, key=None, tool=None,
    #                      webbase_dict={}):
    #     default_dict = {
    #         'name': name,
    #         'description': description,
    #         'severity': severity,
    #         'key': key,
    #         'tool': tool,
    #     }
    #     default_dict.update(webbase_dict)
    #     # key + source 唯一,只要最新数据
    #
    #     model, created = VulnerabilityModel.objects.update_or_create(ipdomain=ipdomain, port=port, name=name, key=key,
    #                                                                  tool=tool, defaults=default_dict)
    #     return created

    # @staticmethod
    # def delete_by_ipdomain_port(ipdomain, port):
    #     VulnerabilityModel.objects.filter(ipdomain=ipdomain, port=port).delete()
    #     return True

# class VulnerabilityObject(IPDomainBaseObject, PortBaseObject, WebBaseObject, ConfigBaseObject):
#     def __init__(self):
#         super().__init__()
#         self.name = None
#         self.description = None
#         self.severity = None
#
#         self.template_id = None
#         self.matched_at = None
#         self.reference = []
#         self.request = None
#         self.response = None
#
#     def update_or_create(self):
#         default_dict = {
#             'ipdomain': self.ipdomain,
#             'port': self.port,
#
#             'source': self.source,
#             'data': self.data,
#             'update_time': self.update_time,
#
#             'name': self.name,
#             'description': self.description,
#             'severity': self.severity,
#
#             'template_id': self.template_id,
#             'matched_at': self.matched_at,
#             'reference': self.reference,
#             'request': self.request,
#             'response': self.response,
#         }
#         model, created = VulnerabilityModel.objects.update_or_create(
#             ipdomain=self.ipdomain,
#             port=self.port,
#
#             name=self.name,
#             template_id=self.template_id,
#             severity=self.severity,
#
#             defaults=default_dict)
#         return model
