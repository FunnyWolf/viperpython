# -*- coding: utf-8 -*-
# @File  : SimpleRewMsfModule.py
# @Date  : 2019/1/11
# @Desc  :

from Lib.ModuleAPI import *


class PostModule(PostMSFRawModule):
    NAME_ZH = "MS17-010扫描"
    DESC_ZH = "模块使用MS17-010的验证代码对主机进行扫描(此操作不会导致蓝屏,但可能会有误报).\n" \
              "如果没有填写IP地址参数则模块默认测试当前主机."

    NAME_EN = "MS17-010 scan"
    DESC_EN = "The module uses poc of MS17-010 to scan the host (this operation will not cause a blue screen, but there may be false positives).\n" \
              "If the IP address parameter is not filled in, the module will test the current host by default."

    MODULETYPE = TAG2TYPE.Lateral_Movement
    PLATFORM = ["Windows"]  # 平台
    PERMISSIONS = ["User", "Administrator", "SYSTEM", ]  # 所需权限
    ATTCK = ["T1210"]  # ATTCK向量
    README = ["https://www.yuque.com/vipersec/module/xk4iv6"]
    REFERENCES = ["https://attack.mitre.org/techniques/T1210/"]

    REQUIRE_SESSION = False
    OPTIONS = register_options([
        OptionIPAddressRange(name='address_range', name_tag="IP列表", desc="IP列表(支持1.1.1.1,3.3.3.3-3.3.3.10格式输入)",
                             required=True),
    ])

    def __init__(self, sessionid, ipaddress, custom_param):
        super().__init__(sessionid, ipaddress, custom_param)
        self.type = "auxiliary"
        self.mname = "scanner/smb/smb_ms17_010_api"

    def check(self):
        """执行前的检查函数"""

        # 设置RHOSTS参数
        address_range = self.param_address_range('address_range')
        if len(address_range) > 256:
            return False, "扫描IP范围过大(超过256),请缩小范围"
        elif len(address_range) < 0:
            self.set_msf_option(key='RHOSTS', value=self.host_ipaddress)
        self.set_msf_option('RHOSTS', ", ".join(address_range))

        return True, None

    def callback(self, status, message, data):
        if status:
            for human_result in data:
                ipaddress = human_result.get('host')
                if human_result.get("result") == "VULNERABLE":
                    os = human_result.get('os')
                    self.log_good("{} 存在MS17-010漏洞    OS: {}".format(ipaddress, os))
                    self.add_host(ipaddress,
                                  source=self.host_ipaddress,
                                  linktype="scan",
                                  data={"method": "vulnscan"})
                    self.add_vulnerability(ipaddress=ipaddress,
                                           extra_data={'os': os},
                                           desc=os)
                elif human_result.get("result") == "UNVULNERABLE":
                    self.add_host(ipaddress,
                                  source=self.host_ipaddress,
                                  linktype="scan",
                                  data={"method": "vulnscan"})
                    self.log_error("{} 不存在MS17-010漏洞".format(ipaddress))
                elif human_result.get("result") == "UNREACHABLE":
                    self.log_error("{} 无法访问".format(ipaddress))
                elif human_result.get("result") == "UNDETECT":
                    self.log_error("{} 检测失败".format(ipaddress))
                else:
                    pass
        else:
            self.log_error("模块执行失败")
            self.log_error(message)
